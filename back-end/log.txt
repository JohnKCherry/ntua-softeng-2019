29/12/2018 - kef
Creating folders for Database and API (Java+gradle).
Importing demo API provided in softeng course repository. API development will be done on top of the demo.

Έπιασα το API και υλοποίησα τα κομμάτια που λείπανε από το demo για το {baseURL}/products (GET)
τώρα υποστηρίζει (θέλω να πιστεύω) πλήρως τις παραμέτρους που ζητάει το API
Επίσης (ΣΗΜΑΝΤΙΚΟ) άλλαξα τη δομή του product.java (φάκελος  model) για να υποστηρίζει τη μορφή που 
πρέπει να παρουσιαστούν τα δεδομένα σε json
Συγκεκριμένα: στο API θέλει τα tags να γυρνάνε ως λίστα από strings, και όχι σαν ένα μεγάλο string
οπότε άλλαξα τον τύπο της αντίστοιχης μεταβλητής
(Στη βάση έχουμε τύπο mediumtext για τα tags, και αυτό καλύτερα να μην αλλάξει)
------------------------------------------------------------------------------------------------------------------------

30/12/2018 - kef
Ολοκλήρωσα το {baseURL}/products (POST). Ουσιαστικά έγραψα ένα regular expression και πέρασα ελέγχους ώστε τα πεδία που εισάγει
ο χρήστης να μην έχουν "περίεργους" χαρακτήρες. Ένα test page για τη δοκιμή αυτής της λειτουργίας προστέθηκε στον φάκελο
με τις δοκιμαστικές σελίδες.

Έφτιαξα και τα put, patch. ΠΡΟΣΟΧΗ: οι προδιαγραφές δεν λαμβάνουν υπόψην το πεδίο status κατά τα post, put και patch. 
Επειδή θα ήταν πολύ χαζό να μην υπάρχει στα τελευταία δύο (χωρίς αυτό όλα τα προϊόντα που έγιναν withdrawn δεν 
θα είχαν τρόπο να ξαναγίνουν active ποτέ) άλλαξα τον κώδικα και το έκανα προαιρετικό.

Έτοιμο και το delete για τα products :)
Στο αρχείο api/ProductResource.java, στη συνάρτηση delete θα βρείτε μια μεταβλητή admin που ρυθμίζει (προσωρινά) τα δικαιώματα
για τη λειτουργία της διαγραφής. Όταν υλοποιηθεί το functionality του login, θα αλλάξει αυτό το σημείο.

Προσέθεσα ελέγχους στα δύο (μέχρι τώρα) ερωτήματα GET που υποστηρίζονται, ώστε να λαμβάνουν υπόψην τη παράμετρο format.
------------------------------------------------------------------------------------------------------------------------

31/12/2018 - kef
Πέρασα τις κλάσεις που μοντελοποιούν τα shops ως οντότητες, καθώς και τον μετασχηματισμό τους σε json.
Ολοκλήρωσα το {baseURL}/shops (GET). Διόρθωσα επίσης μερικά μικρά bugs σχετικά με τα μηνύματα που 
πρέπει να επισρτέφει ο server αν κάτι πάει στραβά.

Έτοιμο και το POST για τα products. Συνειδητοποιώ ότι μέχρι τώρα το API δεν υποστηρίζει καθόλου τα ελληνικά 
(δεν περνάνε από τα regular expressions που έχω γράψει). Θα πρέπει να γίνει ένα μικρό circle back για να μπούνε και αυτά.

UPDATE: αν απενεργοποιηθεί ο έλεγχος χαρακτήρων με το regular expression, τα ελληνικά παίζουν κανονικά. Προσωρινά κρατάω τον 
έλεγχο, και όταν ελύσω το πρόβλημα με κάποιο καλύτερο regex θα μπουν και τα ελληνικά. 

Επίσης, διορθώθηκε το μήνυμα σφάλματος που επιστρέφεται όταν επιχειρήσει κάποιος να δώσει δύο φορές POST 
για ένα αντικείμενο (product ή shop).

Έτοιμο και το {baseURL}/shops/{id} GET functionality.
------------------------------------------------------------------------------------------------------------------------

01/01/2019 - kef
Καλή χρονιά!
Ολοκλήρωσα τα put & patch για το {baseURL}/shops/{id}.
Επίσης, πέρασα κι άλλα patches για bugs σχετικά με exception handling όταν η εισαγωγή ή η ενημέρωση ενός αντικειμένου 
προκαλεί conflict με κάποιο άλλο αντικείμενο (π.χ. δύο προϊόντα έχουν το ίδιο όνομα, ή δύο καταστήματα την ίδια διεύθυνση).

Έτοιμο και το delete για τα shops. Θυμήζω ότι μια λογική μεταβλητή (που είναι σταθερά ορισμένη ως false by default) ορίζει 
τη δικαιοδοσια για το αν πρέπει να γίνει withdrawal ή delete.

------------------------------------------------------------------------------------------------------------------------

02/01/2019 - kef
Έγραψα τις απαραίτητες κλάσεις για να υποστηρίξει το API τις τιμές, και υλοποίησα τη λειτουργικότητα για το {baseURL}/prices 
POST. Ανέβασα σχετικό test page. Επίσης, διόρθωσα μερικά bugs στα GET των shops και των products
(δεν επέστρεφαν σωστά τα αποτελέσματα βάσει των πραμέτρων start και count).

Επίσης, έφτιαξα ένα δοκιαστικό url (http://localhost:8765/app/observatory/api/productswithimage/2) που επιστρέφει μαζί με το
προϊόν και την εικόνα του. Ενημερώνω και το sql αρχείο της βάσης με τον πίνακα για τις εικόνες (είναι ξεχωριστός από τα 
products). Επειδή δεν είναι δεσμευτικό κάθε product να έχει εικόνα, θα πρέπει να συζητήσουμε με ποιον τρόπο θα μπαίνει 
μια default εικόνα όπου δεν βάζει κάτι ο χρήστης, ή αν προτιμάμε να μένει κενό το αντίστοιχο πεδίο και να βάζει μια 
dummy εικόνα το front end στα σημεία που λείπει η πραγματική φωτό.
------------------------------------------------------------------------------------------------------------------------

04/01/2019 - kef
Bug fix για το cross-origin disabled access. Ουσιαστικά έφτιαξα ένα filter που υποδεικνύει στο restlet να επιτρέπει
όλες τι προσβάσεις (ενεργοποιώντας τα κατάλληλα header) στο restlet.

------------------------------------------------------------------------------------------------------------------------

07/01/2019 - kef
Άλλαξα τη βαση. Έσβησα τον πίνακα images και πρόσθεσα column: image στον πίνακα products. Ενημέρωσα τον κώδικα του API 
για να επιστρέφει σωστά δεδομένα βάσει αυτής της αλλαγής.

------------------------------------------------------------------------------------------------------------------------
08/01/2019 - raf
έφτιαξα το get functionality για τα prices και το test page, και διορθώθηκαν μερικά bugs στο api (όπως στα products).


------------------------------------------------------------------------------------------------------------------------

08/01/2019 - kef
Διόρθωσα (πολλά μικρά) θέματα που είχε το {baseURL}/prices GET. Κυρίως άλλαξα τον τρόπο με τον οποίο παραμετροποιούνται 
τα αιτήματα βάσει τοποθεσίας και ο τρόπος που εξετάζουμε αν ένα tag υπάρχει στη βάση. Σχετικά με τα tags, ο έλεγχος γίνεται 
για κάθε λέξη ξεχωριστά (αυτό σημαίνει ότι το string "fast service" ουσιαστικά αναγνωρίζεται ως δύο tags). Αυτό δεν είμαι 
σίγουρος ότι είναι απόλυτα σωστό, ωστόσο βολεύει πάρα πολύ για να μην χάσω πολλές ώρες ύπνου :)
Ενημέρωσα επίσης το test page για το GET prices (μπορείτε είτε να βάλετε πολλά ταγκς σε ένα πεδίο χωρισμένα με κενό ή κόμμα,
ή να βάλετε και στα δύο πεδία ένα ή περισσότερα ταγκς, είτε πρόκειται για προϊόντα είτε για καταστήματα).
Ενσωμάτωσα επίσης στον κώδικα του API αυτά που ανέβηκαν στο repository του μαθήματος (μόνο το server side, δεν προσέθεσα κάτι
από το https://github.com/saikos/softeng18b-rest-api-client ακόμα).

------------------------------------------------------------------------------------------------------------------------

09/01/2019 - kef
Ενημερώνω το build.gradle γιατί με τις τελευταίες αλλαγές το project δεν κάνει σωστά compile.

------------------------------------------------------------------------------------------------------------------------

10/01/2019 - kef
Υλοποίησα τις λειτουργικότητες για login και sign up (σύντομα θα γράψω και για log out) και έφτιαξα και δύο πρόχειρα test pages.
Έκανα μερικές αλλαγές ασφαλείας σε μερικά queries του DataAccess (επειδή δεν χρησιμοποιώ πάντα πέρασμα παραμέτρων μέσω prepared
statements, φρόντισα να περνάνε όλες οι μεταβλητές που αξαιρούνται από datatypes της Java που αποκλείουν ένα SQL injection).
Επίσης, αφαίρεσα του ελέγχους βάσει regular axpressions που αποκλείουν συγκεκριμένους χαρακτήρες απο τα string που μπορεί 
να εισάγει ο χρήστης (προς το παρόν θα επιτρέπονται όλα).
Προσοχή, στη βάση που ανέβασα, μπορείτε να ελέγξετε το login μόνο με τον χρήστη dcrs001 (έχει κωδικό 123456789).
Αν φτιάξετε δικό σας χρήστη κρατείστε κάπου τον κωδικό του, στη βάση αποθηκεύω μόνο το SHA256 hash του κωδικού.

Part II: Έτοιμο και το log out. Επίσης, υλοποίησα τα εξής url:
  1) (GET) /productswithimage λειτουργεί ακριβώς όπως το (GET) products από πλευράς παραμέτρων, αλλά επιστρέφει και εικόνες
  2) (GET) /productsbynamewithimage/{name} όπου επιστρέφει προϊόντα με εικόνα βάσει λεξιλογικής αναζήτησης.
Επίσης, έφτιαξα test page για το πρώτο url της λίστας, και άλλαξα τη δομή της βάσης (FULLTEXT Index για το products: name).
Είναι πολύ σημαντικό να ενημερώσετε και τη βάση, όχι μόνο το API, αν κατεβάσετε τον κώδικα :)


------------------------------------------------------------------------------------------------------------------------

11/01/2019 - kef
Major update για να συμβαδίζουμε με τον test client. Το app/ μας αποχαιρετά για πάντα από το url της εφαρμογής και το Login
επιστρέφει το τόκεν μέσα από το attribute "token" στο JSON. Επίσης διορθώθηκε το πρόβλημα με τις αποστάσεις στο GET prices
και ενσωματώθηκε το testing (μπορείτε να τρέξετε gradle test και να δείτε τους ελέγχους που ήταν έτοιμοι από το repository
του μαθήματος να τρέχουν κανονικά).

------------------------------------------------------------------------------------------------------------------------

12/01/2019 - kef
έτοιμο και το (σωστό βάσει των προδιαγραφών) GET prices
υπάρχει όμως ένα πρόβλημα:
όπως το ζητάνε οι προδιαγραφές (δηλαδή να γυρνάει μία καταχώρηση για κάθε έγκυρη μέρα για κάθε προϊόν), σε περίπτωση που
δεν προσδιορίσει κάποιος τις ημερομηνίες θα γυρίσουν ΠΟΛΛΑ δεδομένα από το back end
θα ρωτήσω περισσότερα για αυτό στο επόμενο μάθημα
μέχρι τότε, έχω αφήσει ένα verbose flag στο url, οπότε κάνοντας GET και στέλνοντας μαζί με τις υπόλοιπες παραμέτρους
και μία παράμετρο με όνομα verbose και τιμή "false", θα πάρετε πίσω αποτέλεσμα JSON με dateFrom και dateTo όπως πριν 
(κάθε τιμή δηλαδή θα εμφανίζεται μόνο μία φορά και όχι τόσες φορές όσες όλες οι έγκυρες μέρες).

------------------------------------------------------------------------------------------------------------------------

15/01/2019 - kef
Προσέθεσα τα (προαιρετικά) πεδία count, total & sort στο GET του {baseURL}/getproductsbynamewithimage.
Επίσης, προσέθεσα functionality για διαγραφή ενός price (δείτε το σχετικό test page για το πως πρέπει να χτυπήσετε
το url). Τέλος, ένα url (profile) όπου με POST επιστρέφει το προφίλ ενός χρήστη (δεν χρειάζεται παράμετρο, απλώς 
πρέπει να υπάρχει η custom επικεφαλίδα στο http) και το PATCH αλλάζει ΜΟΝΟ μία από τις εξής τιμές (fullname, username,
email, password) και παίρνει ως παραμέτρο την τιμή που θα αλλάξει -και τη νέα τιμή ως value - π.χ. fullname='NewFullName'.
Σύντομα θα προσθέσω και τρία url σχετικά με τον πίνακα favourites της βάσης (GET,POST,DELETE). Προσοχή, αν αλλάξει το 
username ή το password τότε ο χρήστης γίνεται αυτόματα logged out.

------------------------------------------------------------------------------------------------------------------------

16/01/2019 - kef
Υλοποίησα το {baseURL}/favourites (με GET και POST) και το {baseURL}/favourites/{productID} (με DELETE). Στο GET δεν 
χρειάζεται να δοθεί καμία πράμετρος (το API αναγνωρίζει τον χρήστη από τον custom http header). To POST χρειάζεται μόνο 
μία παράμετρο στο body του μηνύματος με όνομα productId. Προσοχή: το DELETE έχει την ιδιαιτερότητα να γυρνάει OK ακόμα και
αν η σχέση που ζητήθηκε να διαγραφεί δεν υπήρχε εξ αρχής (π.χ. DELETE με productID = 4 όταν έχει γίνει login με τον χρήστη
user ο οποίος δεν έχει βάλει το προϊόν με id 4 στα αγαπημένα, θα επιστραφεί message = "OK"). Θέλω να πιστεύω δεν θα βρείτε
παρόμοιες ιδιαιτερότητες, όταν μία ενέργει δεν εκτελεστεί σωστά θα πρέπει να γυρνάει κατάλληλο μήνυμα (συνήθως με error 400) 
που να εξηγεί τι έχει συμβεί. 
Επίσης, κλείδωσα τα endpoints που δεν πρέπει να είναι ανοικτά με έλεγχο για login.

------------------------------------------------------------------------------------------------------------------------

17/01/2019 - kef
Άλλαξα το Primary Key του πίνακα prices της βάσης ώστε να περιλαμβάνει τα πεδία: price, dateFrom, dateTo. Εφεξής, δεν θα μας 
πειράζει να εμφανίζονται πολλαπλά αποτελέσματα στο GET prices που να έχουν ίδια μέρα, προϊόν, κατάστημα (και ίδια ή 
διαφορετική τιμή). Το μόνο που δεν θα επιτρέπει η βάση είναι διπλοεγγραφές (ήτοι κοινό productID-shopID-price-dateFrom-dateTo).
Επίσης, διόρθωσα την ασυνέπεια μεταξύ των start, count και των αποτελεσμάτων που επέστρεφε το GET prices εάν δεν δινόταν 
verbose = false.

------------------------------------------------------------------------------------------------------------------------

19/01/2019 - kef
Άλλαξα το Sign Up ώστε να επιστρέφει το API token (και να μην χρειάζεται Login για να χρησιμοποιήσει ο χρήστης την υπηρεσία
αν έχει μόλις εγγραφεί). Επίσης, θυμήζω ότι από αυτό το push κλειδώνονται όλα τα endpoints που δεν πρέπει να είναι ανοικτά 
μέσω του login, οπότε θα πρέπει να προσαρμοστούν όλες οι φόρμες του front end.

------------------------------------------------------------------------------------------------------------------------

21/01/2019 - kef
Πρόσθεσα το πεδίο tags στο GET prices για να είμαστε εντάξει με τα specifications. Αν χρησιμοποιηθεί, θα εκτελείται το 
(sub) query που περιγράφεται στις προδιαγραφές. Διαφορετικά, μπορούν να χρησιμοποιηθούν τα productTags και shopTags που
αναφέρονται ξεχωριστά σε προϊόνα και καταστήματα (και δεν έχουν σχέση μεταξύ, τους, δεν είναι ανάγκη να υπάρχουν και 
τα δύο ταυτόχρονα).

------------------------------------------------------------------------------------------------------------------------

22/02/2019 - kef
Εφάρμοσα τις αλλαγές που χρειάζονται για εφαρμογή του SSL (build.gradle). Εφεξής το front end θα πρέπει να χρησιμοποιεί 
μόνο HTTPS κλήσεις. Το RestAPISpecification επίσης ενημερώθηκε για να προσαρμοστεί στο HTTP και πρόσθεσα και έναν έλεγχο για
επιτυχή διαγραφή (withdrawn is set to 1) προϊόντος από πιστοποιημένο χρήστη.

------------------------------------------------------------------------------------------------------------------------

24/02/2019 - kef
Ολοκλήρωσα τους δοκιμαστικούς ελέγχους για product & shop endpoints. Επίσης, διόρθωσα κάποια bugs που εμφανίστηκαν κατά τη 
διάρκεια των ελέγχων.

------------------------------------------------------------------------------------------------------------------------

26/02/2019 - kef
Έφτιαξα (GET) productsByName & shopsByName endpoints στο API. Επίσης, έχω αφήσει σε μη λειτουργική φάση το (POST) 
productWithImage endpoint, θέλω να πιστεύω ότι θα το ολοκληρώσω σύντομα...

------------------------------------------------------------------------------------------------------------------------

27/02/2019 - kef
Έτοιμος και το (POST) productWithImage endpoint. Από τη πλευρά του front end είναι πολύ εύκολο να χρησιμοποιηθεί με 
μια απλή HTML φόρμα (τσεκάρετε το σχετικό test page για λεπτομέρειες).

------------------------------------------------------------------------------------------------------------------------

27/02/2019 - kef
Διόρθωσα bug στο (GET) productsWithImage. Επίσης πρόσθεσα δυνατότητα στο (GET) productsByName να υποστηρίζει το πεδίο sort
(όπως ακριβώς και στο GET products). Επίσης, αν δεν δοθεί name στο productsByName τότε αντί για κενή λίστα θα επιστρέφεται 
ό,τι θα επέστρεφε το (GET) products. Το ίδιο θα κάνω και με το shopsByName.
------------------------------------------------------------------------------------------------------------------------

28/02/2019 - kef
Έτοιμο και το (GET) shopsByName (υποστηρίζει πεδίο sort και σε περίπτωση που δεν δοθεί όνομα δεν επιστρέφει κενή λίστα 
αλλά ό,τι θα επέστρεφε το (GET) shops. Επίσης, βρήκα το bug με το πρόβλημα στα ελληνικά, δεν φταίει το API. Πρέπει σε
όλες τις φόρμες που επικοινωνούν με το API να υπάρχει το accept-charset="utf-8" ως attribute του from!
